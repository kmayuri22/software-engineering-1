kubernets:
kubectl apply -f nginx-deployment.yaml
kubectl get pods
kubectl expose deployment nginx-deployment --type=NodePort --name=nginx-service
kubectl get svc

nginx-deployment.yaml-save
code:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80

code2:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80
          protocol: TCP



jenkins:
docker pull jenkins/jenkins:lts
docker run -d -p 8080:8080 -p 50000:50000 --name jenkins -v jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkins/jenkins:lts
docker ps
docker logs jenkins

docker coontainer/images:
print("helloworld")

FROM python:3.13-slim
WORKDIR /app
COPY hello.py /app
CMD ["python",Â "hello.py"]

rename dockerfile.txt dockerfile

docker build -t python313-tt
docker run
docker login
docker tag id/python313-tt
docker push id/python313-tt
docker run python313-tt


push:
mkdir git
cd git
echo "hello" >> file.txt
git config -l
git init
git add file.txt
git commit -m"initial commit"
git log
git remote add test (link)
git remote add (link name)
git branch -M main
git push -u (link name) main
git push -u (link name) main
git status
git pull
